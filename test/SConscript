#
# Copyright (C) 2011-2013 Alex Smith
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

import os

Import('env', 'config')

if config['PLATFORM'] == 'pc':
    targets = [
        ('32', ['-m32'], ['-m32'], [
            '../3rdparty/compiler-rt/i386/udivdi3.S',
            '../3rdparty/compiler-rt/i386/umoddi3.S',
        ]),
        ('64', ['-m64', '-mcmodel=kernel'], ['-m64'], [])
    ]
elif config['PLATFORM'] == 'omap3':
    targets = [
        ('', [], [], [
            '../3rdparty/compiler-rt/arm/aeabi_uldivmod.S',
            '../3rdparty/compiler-rt/arm/udivsi3.S',
            '../3rdparty/compiler-rt/arm/umodsi3.S',
            '../3rdparty/compiler-rt/udivmoddi4.c',
            '../3rdparty/compiler-rt/umoddi3.c',
        ])
    ]
elif config['PLATFORM'] == 'bcm2835':
    targets = [
        ('', [], [], [
            '../3rdparty/compiler-rt/arm/aeabi_uldivmod.S',
            '../3rdparty/compiler-rt/arm/udivsi3.S',
            '../3rdparty/compiler-rt/arm/umodsi3.S',
            '../3rdparty/compiler-rt/udivmoddi4.c',
            '../3rdparty/compiler-rt/umoddi3.c',
            '../source/platform/generic/pl011/pl011.c',
        ])
    ]
else:
    targets = []

# List of our own sources.
sources = [
    '%s/console.c' % (config['PLATFORM']),
    'main.c',
    'support.c',
    'fb.c',
    'font.c',
    '../source/lib/printf.c',
    '../source/lib/string.c',
]

# Build test kernel for each supported configuration.
for (target, ccflags, linkflags, extra_sources) in targets:
    ldscript = env.LDScript('link%s.ld' % (target),
        'link-%s%s.ld.in' % (config['PLATFORM'], target))
    ccflags += [x for x in env['CCFLAGS'] if x not in ['-m32', '-m64']]
    linkflags += [x for x in env['LINKFLAGS'] if x not in ['-m32', '-m64']] + [
        "-Wl,-T,${File('link%s.ld')}" % target]

    env.Program('test%s.elf' % (target),
        map(lambda x: env.Object('%s%s.o'
            % (os.path.splitext(os.path.basename(str(x)))[0], target), x,
            CCFLAGS = ccflags), map(File, sources + extra_sources)),
        LINKFLAGS = linkflags)
    Depends('test%s.elf' % target, ldscript)
    Alias('test', File('test%s.elf' % target))
